rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Đã đăng nhập
    function isAuthenticated() {
      return request.auth != null;
    }

    // Là chủ sở hữu
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Là thành viên lớp
    function isMember(memberIds) {
      return request.auth.uid in memberIds;
    }

    // Là admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleId == 'admin';
    }

    // Là giáo viên của lớp
    function isTeacherOfClass(classroomId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/classrooms/$(classroomId)).data.teacherId == request.auth.uid;
    }
    
    // Là giáo viên
    function isTeacher() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleId == 'teacher';
    }


    // Khoá học có đang bị khoá hay không
    function isCourseClosed(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId));
      let courseId = classroom.data.courseId;
      return courseId != null && get(/databases/$(database)/documents/courses/$(courseId)).data.isClosed == true;
    }

    // Admin có quyền truy cập tất cả collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Rule với lớp học
    match /classrooms/{classroomId} {
      // Cho phép nếu đã đăng nhập và lớp public
      allow read: if isAuthenticated() && (
       resource.data.isPublic == true ||
        // Query chỉ giới hạn kết quả về 1 phần tử trở xuống 
        request.query.limit <= 1 ||
        // Người dùng là giáo viên chủ nhiệm
        isOwner(resource.data.teacherId) ||
        // Người dùng là thành viên
        isMember(resource.data.memberIds) ||
        // Người dùng đang chờ xét duyệt vào lớp
        request.auth.uid in resource.data.pendingMemberIds
      );
      
      // Cho phép tạo lớp nếu đăng nhập
      allow create: if isAuthenticated();
      
      // Cho phép sửa lớp nếu đã đăng nhập
      allow update: if isAuthenticated() && (
        // Là giáo viên
        isTeacherOfClass(classroomId) ||
        // Là admin
        isAdmin() ||
        // Là người tạo lớp
				isOwner(resource.data.teacherId) ||
        // Cho phép học sinh thêm mình vào pendingMemberIds
        (
          // Chỉ cho phép thêm vào pendingMemberIds
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pendingMemberIds']) &&
          // Đảm bảo chỉ thêm ID của chính mình
          request.resource.data.pendingMemberIds.hasAll(resource.data.pendingMemberIds) &&
          request.resource.data.pendingMemberIds.hasOnly(resource.data.pendingMemberIds.concat([request.auth.uid]))
        ) ||
        // Cho phép học sinh tự xóa mình khỏi memberIds
        (
          request.auth.uid in resource.data.memberIds &&
          !(request.auth.uid in request.resource.data.memberIds)
        )
      );
      
      // Cho phép xoá nếu đăng nhập
      allow delete: if isAuthenticated() && 
        // Là giáo viên lớp hoặc admin
        (isTeacherOfClass(classroomId) || isAdmin());
			
      // Được phép liệt kê các lớp học nếu đã đăng nhập
      allow list: if isAuthenticated() && (
      	// Là admin
        isAdmin() ||
        isTeacher() ||
        // Là thành viên của lớp
        isMember(resource.data.memberIds) ||
        // Là giáo viên lớp
        isTeacherOfClass(classroomId) ||
        // Giới hạn 50 kết quả
        request.query.limit <= 50
      );
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    match /roles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    match /flashcards/{flashcardId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin() ||
        isTeacher()
      );
      allow list: if isAuthenticated() && (
        request.query.limit <= 50
      );
    }

   match /flashcard_items/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin() ||
        isTeacher()
      );
      allow list: if isAuthenticated() && (
        request.query.limit <= 50
      );
    }

    match /folders/{folderId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);

      allow list: if isAuthenticated() && (
        request.query.limit <= 50 && (
          resource.data.isPublic == true ||
          isOwner(resource.data.userId)
        )
      );
    }

    match /videos/{videoId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated();
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }
    
    match /materials/{materialId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin()
    }
    
    match /materials/{materialId} {
      allow read, write: if true;
    }
    match /learningMaterials/{materialId} {
      allow read, write: if true;
    }
    
    match /lessons/{lessonId} {
    	allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isTeacher() || isAdmin());
      allow get: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, delete: if isAuthenticated();
      allow update: if isAuthenticated() && !isCourseClosed(resource.data.classroomId)
    }

    match /learning_progress/{progressId} {
      // Cho phép đọc (cả get và list) nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu:
      // 1. Đã đăng nhập
      // 2. userId trong dữ liệu trùng với id người dùng hiện tại
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      // 2. Hoặc là giáo viên của lớp học
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeacherOfClass(resource.data.classroomId)
      );

      // Cho phép xóa nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      // 2. Hoặc là giáo viên của lớp học
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeacherOfClass(resource.data.classroomId)
      );
    }

    // Bảo đảm tương thích với cả hai collection name
    match /learningProgress/{progressId} {
      // Cho phép đọc (cả get và list) nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu:
      // 1. Đã đăng nhập
      // 2. userId trong dữ liệu trùng với id người dùng hiện tại
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow update: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);

      // Cho phép xóa nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow delete: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);
    }

    match /pending_content/{contentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.authorId) ||
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        isAdmin() ||
        (isOwner(resource.data.authorId) && resource.data.status == 'pending')
      );
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }
    
    function isStudentInClassroom(classroomId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/classrooms/$(classroomId)).data.memberIds.hasAny([request.auth.uid])
      );
    }

    // Thêm function để kiểm tra lesson
    function getLessonClassroomId(lessonId) {
      return get(/databases/$(database)/documents/lessons/$(lessonId)).data.classroomId;
    }

    // Exercises collection
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isAdmin() || isTeacher());
      allow list: if isAuthenticated() && (
        request.query.limit <= 50
      );
    }
    
    // Rules for exercise_attempts collection
    match /exercise_attempts/{attemptId} {
      // Allow read if:
      // 1. User is authenticated AND
      // 2. Either:
      //    a. User is the owner of the attempt OR
      //    b. User is a teacher of the classroom OR
      //    c. User is an admin
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeacher() ||
        isTeacherOfClass(resource.data.classroomId) ||
        isAdmin()
      );

      // Allow create if:
      // 1. User is authenticated AND
      // 2. User is creating their own attempt
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Allow update if:
      // 1. User is authenticated AND
      // 2. Either:
      //    a. User is the owner of the attempt OR
      //    b. User is a teacher of the classroom OR
      //    c. User is an admin
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeacherOfClass(resource.data.classroomId) ||
        isAdmin()
      );

      // Allow list if:
      // 1. User is authenticated AND
      // 2. Either:
      //    a. User is a teacher of the classroom OR
      //    b. User is an admin
      allow list: if isAuthenticated() && (
        isTeacherOfClass(resource.data.classroomId) ||
        isAdmin()
      );
    }
    
    // Exercise Questions collection
    match /exercise_questions/{questionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isTeacher()
      );
      allow update, delete: if isAuthenticated() && (
        isAdmin() ||
        isTeacher()
      );
      allow list: if isAuthenticated() && (
        request.query.limit <= 50
      );
    }
    
    // Analytics tracking collections
    match /user_video_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    match /user_flashcard_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    match /user_quiz_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }

    match /discussions/{discussionId} {
      // Cho phép đọc nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu đã đăng nhập
      allow create: if isAuthenticated();
      
      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập
      // 2. Là người tạo thảo luận
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId);
      
      // Cho phép xóa nếu:
      // 1. Đã đăng nhập
      // 2. Là người tạo thảo luận hoặc là giáo viên của lớp
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        (resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId))
      );

      // Cho phép truy vấn replies (discussions có parentId)
      allow list: if isAuthenticated() && (
        request.query.limit <= 50 && (
          resource.data.parentId != null || 
          resource.data.classroomId != null && (
            isTeacherOfClass(resource.data.classroomId) ||
            isStudentInClassroom(resource.data.classroomId)
          )
        )
      );
    }
		
    match /flashcards/{userId}/{flashcardId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Badges collection
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User badges collection
    match /user_badges/{userBadgeId} {
      allow read: if isAuthenticated() && (
        // User can read their own badges
        request.auth.uid == resource.data.userId ||
        // Admin can read all badges
        isAdmin() ||
        // Teacher can read badges of their students
        isTeacher() ||
        // Teacher can read badges of students in their classroom
        (
          resource.data.classroomId != null && 
          isTeacherOfClass(resource.data.classroomId)
        )
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }
    
    // User streaks collection
    match /user_streaks/{userId} {
      allow read: if isAuthenticated() && (
        // User can read their own streaks
        request.auth.uid == userId ||
        // Admin can read all streaks
        isAdmin() ||
        // Teacher can read streaks of their students
        isTeacher()
      );
      allow write: if isAuthenticated() && (
        // User can write their own streaks
        request.auth.uid == userId ||
        // Admin can write all streaks
        isAdmin()
      );
    }
    
    // Quizzes collection
    match /quizzes/{quizId} {
      allow read: if isAuthenticated() && (
        // Allow if user has access to the lesson
        resource.data.lessonId != null && (
          isTeacherOfClass(getLessonClassroomId(resource.data.lessonId)) ||
          isStudentInClassroom(getLessonClassroomId(resource.data.lessonId))
        )
      );
      
      // Only teachers and admins can create/update/delete quizzes
      allow create, update, delete: if isAuthenticated() && (
        isTeacher() || isAdmin()
      );
    }
    
    match /quiz_attempts/{attemptId} {
      // Allow read if authenticated user is:
      // 1. The owner of the attempt
      // 2. A teacher of the classroom
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId)
      );

      // Allow create if the user is the owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;

      // Allow update if the user is the owner
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // User tokens collection for notifications
    match /user_tokens/{tokenId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create/update if the user is the owner of the token
      allow create, update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow delete if the user is the owner of the token
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
}