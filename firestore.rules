rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMember(memberIds) {
      return request.auth.uid in memberIds;
    }

    match /classrooms/{classroomId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.query.limit <= 1 ||
        isOwner(resource.data.teacherId) ||
        isMember(resource.data.memberIds) ||
        request.auth.uid in resource.data.pendingMemberIds
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.teacherId) ||
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['memberIds', 'pendingMemberIds', 'updatedAt']))
      );
      
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.teacherId);

      allow list: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    match /roles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    match /flashcards/{flashcardId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.auth.uid == resource.data.userId
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    match /flashcard_items/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    match /folders/{folderId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);

      // Cho phép search folders công khai
      allow list: if isAuthenticated() && (
        request.query.limit <= 50 && (
          resource.data.isPublic == true ||
          isOwner(resource.data.userId)
        )
      );
    }

    match /videos/{videoId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }
  }
}