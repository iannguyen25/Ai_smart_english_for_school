rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMember(memberIds) {
      return request.auth.uid in memberIds;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleId == 'admin';
    }

    function isTeacherOfClass(classroomId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/classrooms/$(classroomId)).data.teacherId == request.auth.uid;
    }

    // Admin có quyền truy cập tất cả collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    match /classrooms/{classroomId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.query.limit <= 1 ||
        isOwner(resource.data.teacherId) ||
        isMember(resource.data.memberIds) ||
        request.auth.uid in resource.data.pendingMemberIds
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.teacherId) ||
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['memberIds', 'pendingMemberIds', 'updatedAt']))
      );
      
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.teacherId);

      allow list: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    match /roles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    match /flashcards/{flashcardId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.auth.uid == resource.data.userId
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    match /flashcard_items/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }

    match /folders/{folderId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);

      allow list: if isAuthenticated() && (
        request.query.limit <= 50 && (
          resource.data.isPublic == true ||
          isOwner(resource.data.userId)
        )
      );
    }

    match /videos/{videoId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        isOwner(resource.data.userId)
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }
    
    match /materials/{materialId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin()
      );
    }
    
    match /materials/{materialId} {
      allow read, write: if true;
    }
    match /learningMaterials/{materialId} {
      allow read, write: if true;
    }
    
    match /lessons/{lessonId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.auth.uid == resource.data.teacherId ||
        request.auth.uid == get(/databases/$(database)/documents/classrooms/$(resource.data.classroomId)).data.teacherId ||
        isAdmin() ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['completedBy', 'updatedAt']) &&
         isStudentInClassroom(resource.data.classroomId))
      );
    }

    match /learning_progress/{progressId} {
      // Cho phép đọc (cả get và list) nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu:
      // 1. Đã đăng nhập
      // 2. userId trong dữ liệu trùng với id người dùng hiện tại
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow update: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);

      // Cho phép xóa nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow delete: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);
    }

    // Bảo đảm tương thích với cả hai collection name
    match /learningProgress/{progressId} {
      // Cho phép đọc (cả get và list) nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu:
      // 1. Đã đăng nhập
      // 2. userId trong dữ liệu trùng với id người dùng hiện tại
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow update: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);

      // Cho phép xóa nếu:
      // 1. Đã đăng nhập và là chủ sở hữu của tiến độ học tập
      allow delete: if isAuthenticated() &&
        ((resource == null) || resource.data.userId == request.auth.uid);
    }

    match /pending_content/{contentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.authorId) ||
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        isAdmin() ||
        (isOwner(resource.data.authorId) && resource.data.status == 'pending')
      );
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow write: if isAdmin();
    }
    
    function isStudentInClassroom(classroomId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/classrooms/$(classroomId)).data.memberIds.hasAny([request.auth.uid])
      );
    }

    // Thêm function để kiểm tra lesson
    function getLessonClassroomId(lessonId) {
      return get(/databases/$(database)/documents/lessons/$(lessonId)).data.classroomId;
    }

    // Flashcards collection
    match /flashcards/{flashcardId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true ||
        isOwner(resource.data.userId) ||
        resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId) ||
        resource.data.classroomId != null && isStudentInClassroom(resource.data.classroomId) ||
        resource.data.lessonId != null && isTeacherOfClass(getLessonClassroomId(resource.data.lessonId)) ||
        resource.data.lessonId != null && isStudentInClassroom(getLessonClassroomId(resource.data.lessonId))
      );
    }

    // Exercises collection
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated() && (
        resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId) ||
        resource.data.classroomId != null && isStudentInClassroom(resource.data.classroomId) ||
        resource.data.lessonId != null && isTeacherOfClass(getLessonClassroomId(resource.data.lessonId)) ||
        resource.data.lessonId != null && isStudentInClassroom(getLessonClassroomId(resource.data.lessonId))
      );
    }
    
    match /exercise_attempts/{attemptId} {
      // Allow read if authenticated user is:
      // 1. The owner of the attempt
      // 2. A teacher of the classroom
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId)
      );

      // Allow create if the user is the owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;

      // Allow update if the user is the owner
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Exercise Questions collection
    match /exercise_questions/{questionId} {
      allow read: if isAuthenticated() && (
        resource.data.exerciseId != null && 
        exists(/databases/$(database)/documents/exercises/$(resource.data.exerciseId)) &&
        (
          isTeacherOfClass(
            get(/databases/$(database)/documents/exercises/$(resource.data.exerciseId)).data.classroomId
          ) ||
          isStudentInClassroom(
            get(/databases/$(database)/documents/exercises/$(resource.data.exerciseId)).data.classroomId
          )
        )
      );
    }
    
    // Analytics tracking collections
    match /user_video_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    match /user_flashcard_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    match /user_quiz_tracking/{trackingId} {
      allow read, write: if isAuthenticated();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }

    match /discussions/{discussionId} {
      // Cho phép đọc nếu đã đăng nhập
      allow read: if isAuthenticated();
      
      // Cho phép tạo mới nếu đã đăng nhập
      allow create: if isAuthenticated();
      
      // Cho phép cập nhật nếu:
      // 1. Đã đăng nhập
      // 2. Là người tạo thảo luận
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId);
      
      // Cho phép xóa nếu:
      // 1. Đã đăng nhập
      // 2. Là người tạo thảo luận hoặc là giáo viên của lớp
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        (resource.data.classroomId != null && isTeacherOfClass(resource.data.classroomId))
      );
    }
		
    match /flashcards/{userId}/{flashcardId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Badges collection
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User badges collection
    match /user_badges/{userBadgeId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }
  }
}