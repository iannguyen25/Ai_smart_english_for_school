import 'package:flutter/material.dart';
import 'package:diacritic/diacritic.dart';
import '../../../services/auth_service.dart';
import '../../../services/chatgpt_service.dart';

class ChatMessage {
  final String text;
  final bool isUser;
  final DateTime timestamp;

  ChatMessage({
    required this.text,
    required this.isUser,
    DateTime? timestamp,
  }) : timestamp = timestamp ?? DateTime.now();
}

class AIChatTab extends StatefulWidget {
  @override
  _AIChatTabState createState() => _AIChatTabState();
}

class _AIChatTabState extends State<AIChatTab> {
  final AuthService _authService = AuthService();
  final ChatGPTService _chatGPTService = ChatGPTService();
  final TextEditingController _textController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _messages = [];
  bool _isLoading = false;
  
  // Ch·ªß ƒë·ªÅ hi·ªán t·∫°i v√† l·ª±a ch·ªçn
  String _currentTopic = '';
  String _currentSubTopic = '';
  bool _waitingForUserInput = false;

  @override
  void initState() {
    super.initState();
    _addInitialMessage();
  }

  @override
  void dispose() {
    _textController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _addInitialMessage() {
    final user = _authService.currentUser;
    String greeting = user != null 
      ? 'Ch√†o ${user.firstName}, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n.' 
      : 'Ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n.';
      
    setState(() {
      _messages.add(
        ChatMessage(
          text: '$greeting\n\nH√¥m nay b·∫°n mu·ªën tr√≤ chuy·ªán v·ªÅ v·∫•n ƒë·ªÅ g√¨:\n\n1. T·ª´ v·ª±ng\n2. Ng·ªØ ph√°p\n3. D·ªãch thu·∫≠t\n4. ƒê·ªçc m·ªôt c√¢u chuy·ªán/b√†i b√°o ti·∫øng Anh\n5. T∆∞ v·∫•n kh√≥a h·ªçc\n6. H·ªó tr·ª£ trung t√¢m',
          isUser: false,
        ),
      );
    });
  }

  void _processUserChoice(String text) {
    // Chu·∫©n h√≥a text input m·ªôt l·∫ßn
    final normalizedText = removeDiacritics(text.toLowerCase());
    
    // X·ª≠ l√Ω l·ª±a ch·ªçn ch·ªß ƒë·ªÅ ch√≠nh
    if (_currentTopic.isEmpty) {
      if (text.contains('1') || 
          normalizedText.contains('tu vung') ||
          normalizedText.contains('vocabulary')) {
        _setMainTopic('vocabulary');
      } else if (text.contains('2') || 
                normalizedText.contains('ngu phap') ||
                normalizedText.contains('grammar')) {
        _setMainTopic('grammar');
      } else if (text.contains('3') || 
                normalizedText.contains('dich thuat') ||
                normalizedText.contains('translate')) {
        _setMainTopic('translation');
      } else if (text.contains('4') || 
                normalizedText.contains('doc') ||
                normalizedText.contains('chuyen') ||
                normalizedText.contains('bao') ||
                normalizedText.contains('reading')) {
        _setMainTopic('reading');
      } else if (text.contains('5') || 
                normalizedText.contains('tu van') ||
                normalizedText.contains('khoa hoc')) {
        _setMainTopic('course-advice');
      } else if (text.contains('6') || 
                normalizedText.contains('ho tro') ||
                normalizedText.contains('trung tam')) {
        _setMainTopic('center-support');
      } else {
        _sendBotMessage('Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ:\n\n1. T·ª´ v·ª±ng\n2. Ng·ªØ ph√°p\n3. D·ªãch thu·∫≠t\n4. ƒê·ªçc m·ªôt c√¢u chuy·ªán/b√†i b√°o ti·∫øng Anh\n5. T∆∞ v·∫•n kh√≥a h·ªçc\n6. H·ªó tr·ª£ trung t√¢m');
      }
      return;
    }
    
    // X·ª≠ l√Ω l·ª±a ch·ªçn ch·ªß ƒë·ªÅ ph·ª•
    if (_currentSubTopic.isEmpty && !_waitingForUserInput) {
      _processSubTopicChoice(text);
      return;
    }
    
    // X·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng khi ƒëang ch·ªù
    if (_waitingForUserInput) {
      _processUserInput(text);
      return;
    }
    
    // Reset v·ªÅ menu ch√≠nh n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu
    if (text.toLowerCase().contains('quay l·∫°i') || 
        text.toLowerCase().contains('menu') || 
        text.toLowerCase().contains('tr·ªü v·ªÅ')) {
      _resetTopics();
      _sendBotMessage('H√¥m nay b·∫°n mu·ªën tr√≤ chuy·ªán v·ªÅ v·∫•n ƒë·ªÅ g√¨:\n\n1. T·ª´ v·ª±ng\n2. Ng·ªØ ph√°p\n3. D·ªãch thu·∫≠t\n4. ƒê·ªçc m·ªôt c√¢u chuy·ªán/b√†i b√°o ti·∫øng Anh\n5. T∆∞ v·∫•n kh√≥a h·ªçc\n6. H·ªó tr·ª£ trung t√¢m');
      return;
    }
    
    // M·∫∑c ƒë·ªãnh g·ª≠i API n·∫øu kh√¥ng ph·∫£i l·ª±a ch·ªçn
    _callChatGPTAPI(text);
  }
  
  void _setMainTopic(String topic) {
    setState(() {
      _currentTopic = topic;
      _currentSubTopic = '';
    });
    
    switch (topic) {
      case 'vocabulary':
        _sendBotMessage('B·∫°n mu·ªën h·ªçc t·ª´ v·ª±ng v·ªÅ ch·ªß ƒë·ªÅ n√†o:\n\n1. Gia ƒë√¨nh\n2. S·ª©c kh·ªèe\n3. T√¨nh y√™u\n4. C√¥ng vi·ªác\n5. Du l·ªãch\n6. ·∫®m th·ª±c');
        break;
      case 'grammar':
        _sendBotMessage('B·∫°n mu·ªën h·ªçc ng·ªØ ph√°p v·ªÅ ph·∫ßn n√†o:\n\n1. Th√¨ (Tenses)\n2. M·∫°o t·ª´ (Articles)\n3. Gi·ªõi t·ª´ (Prepositions)\n4. M·ªánh ƒë·ªÅ quan h·ªá (Relative Clauses)\n5. C√¢u ƒëi·ªÅu ki·ªán (Conditionals)');
        break;
      case 'translation':
        _sendBotMessage('Vui l√≤ng nh·∫≠p t·ª´ ho·∫∑c c·ª•m t·ª´ b·∫°n mu·ªën d·ªãch:');
        setState(() {
          _waitingForUserInput = true;
        });
        break;
      case 'reading':
        _sendBotMessage('B·∫°n mu·ªën ƒë·ªçc b√†i v·ªÅ ch·ªß ƒë·ªÅ n√†o:\n\n1. VƒÉn h√≥a\n2. C√¥ng ngh·ªá\n3. Th·ªÉ thao\n4. Gi√°o d·ª•c\n5. M√¥i tr∆∞·ªùng\n6. Khoa h·ªçc');
        break;
      case 'course-advice':
        _sendBotMessage('''Th√¥ng tin v·ªÅ Tr∆∞·ªùng Anh ng·ªØ qu·ªëc t·∫ø PoPoDoo ƒê·ªãnh C√¥ng (PoPoDoo Smart English):

üìç Th√¥ng tin c∆° b·∫£n:
- ƒê·ªãa ch·ªâ: S·ªë 85, ƒê∆∞·ªùng Tr·∫ßn Nguy√™n ƒê√°n, Ph∆∞·ªùng ƒê·ªãnh C√¥ng, Qu·∫≠n Ho√†ng Mai, H√† N·ªôi
- ƒê·ªô tu·ªïi tuy·ªÉn sinh: T·ª´ 3-15 tu·ªïi
- H·ªçc ph√≠: T·ª´ 1.650.000 VNƒê/th√°ng

üéØ Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:
1. Ti·∫øng Anh m·∫ßm non (3-5 tu·ªïi)
2. Ti·∫øng Anh ti·ªÉu h·ªçc (6-10 tu·ªïi)
3. Ti·∫øng Anh thi·∫øu ni√™n (11-15 tu·ªïi)

üåü ƒêi·ªÉm n·ªïi b·∫≠t:
- H∆°n 10 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y ti·∫øng Anh cho tr·∫ª em
- Ch∆∞∆°ng tr√¨nh theo ti√™u chu·∫©n Cambridge
- M√¥i tr∆∞·ªùng h·ªçc t·∫≠p ƒëa ph∆∞∆°ng ti·ªán "Hear, Say, See, Do"
- ƒê·ªôi ng≈© gi√°o vi√™n Vi·ªát Nam v√† n∆∞·ªõc ngo√†i ƒë·∫°t chu·∫©n s∆∞ ph·∫°m
- C∆° s·ªü v·∫≠t ch·∫•t hi·ªán ƒë·∫°i, ph√π h·ª£p v·ªõi tr·∫ª em

B·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ kh√≥a h·ªçc n√†o? Ho·∫∑c b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:
- ƒê·ªô tu·ªïi c·ªßa h·ªçc vi√™n
- M·ª•c ti√™u h·ªçc t·∫≠p
- Th·ªùi gian h·ªçc mong mu·ªën
ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p.''');
        setState(() {
          _waitingForUserInput = true;
        });
        break;
      case 'center-support':
        _sendBotMessage('''Th√¥ng tin li√™n h·ªá v√† h·ªó tr·ª£:

1. Th√¥ng tin chung
2. L·ªãch h·ªçc v√† h·ªçc ph√≠
3. ƒêƒÉng k√Ω h·ªçc th·ª≠
4. T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc
5. Li√™n h·ªá tr·ª±c ti·∫øp

üìç Th√¥ng tin li√™n h·ªá:
- ƒê·ªãa ch·ªâ: S·ªë 85, ƒê∆∞·ªùng Tr·∫ßn Nguy√™n ƒê√°n, Ph∆∞·ªùng ƒê·ªãnh C√¥ng, Qu·∫≠n Ho√†ng Mai, H√† N·ªôi
- H·ªçc ph√≠: T·ª´ 1.650.000 VNƒê/th√°ng
- ƒê·ªô tu·ªïi: 3-15 tu·ªïi
- Ch∆∞∆°ng tr√¨nh: Theo ti√™u chu·∫©n Cambridge

Vui l√≤ng ch·ªçn m·ª•c b·∫°n c·∫ßn h·ªó tr·ª£ ho·∫∑c nh·∫≠p c√¢u h·ªèi c·ª• th·ªÉ.''');
        setState(() {
          _waitingForUserInput = true;
        });
        break;
    }
  }
  
  void _processSubTopicChoice(String text) {
    // Chu·∫©n h√≥a text input m·ªôt l·∫ßn
    final normalizedText = removeDiacritics(text.toLowerCase());
    
    if (_currentTopic == 'vocabulary') {
      if (text.contains('1') || 
          normalizedText.contains('gia dinh') ||
          normalizedText.contains('family')) {
        _setSubTopic('family');
      } else if (text.contains('2') || 
                normalizedText.contains('suc khoe') ||
                normalizedText.contains('health')) {
        _setSubTopic('health');
      } else if (text.contains('3') || 
                normalizedText.contains('tinh yeu') ||
                normalizedText.contains('love')) {
        _setSubTopic('love');
      } else if (text.contains('4') || 
                normalizedText.contains('cong viec') ||
                normalizedText.contains('work')) {
        _setSubTopic('work');
      } else if (text.contains('5') || 
                normalizedText.contains('du lich') ||
                normalizedText.contains('travel')) {
        _setSubTopic('travel');
      } else if (text.contains('6') || 
                normalizedText.contains('am thuc') ||
                normalizedText.contains('food')) {
        _setSubTopic('food');
      } else {
        _sendBotMessage('Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ t·ª´ v·ª±ng h·ª£p l·ªá (1-6).');
      }
    } else if (_currentTopic == 'grammar') {
      if (text.contains('1') || 
          normalizedText.contains('thi') ||
          normalizedText.contains('tenses')) {
        _setSubTopic('tenses');
      } else if (text.contains('2') || 
                normalizedText.contains('mao tu') ||
                normalizedText.contains('articles')) {
        _setSubTopic('articles');
      } else if (text.contains('3') || 
                normalizedText.contains('gioi tu') ||
                normalizedText.contains('prepositions')) {
        _setSubTopic('prepositions');
      } else if (text.contains('4') || 
                normalizedText.contains('menh de quan he') ||
                normalizedText.contains('relative')) {
        _setSubTopic('relative-clauses');
      } else if (text.contains('5') || 
                normalizedText.contains('cau dieu kien') ||
                normalizedText.contains('conditionals')) {
        _setSubTopic('conditionals');
      } else {
        _sendBotMessage('Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ ng·ªØ ph√°p h·ª£p l·ªá (1-5).');
      }
    } else if (_currentTopic == 'reading') {
      if (text.contains('1') || 
          normalizedText.contains('van hoa') ||
          normalizedText.contains('culture')) {
        _setSubTopic('culture');
      } else if (text.contains('2') || 
                normalizedText.contains('cong nghe') ||
                normalizedText.contains('technology')) {
        _setSubTopic('technology');
      } else if (text.contains('3') || 
                normalizedText.contains('the thao') ||
                normalizedText.contains('sports')) {
        _setSubTopic('sports');
      } else if (text.contains('4') || 
                normalizedText.contains('giao duc') ||
                normalizedText.contains('education')) {
        _setSubTopic('education');
      } else if (text.contains('5') || 
                normalizedText.contains('moi truong') ||
                normalizedText.contains('environment')) {
        _setSubTopic('environment');
      } else if (text.contains('6') || 
                normalizedText.contains('khoa hoc') ||
                normalizedText.contains('science')) {
        _setSubTopic('science');
      } else {
        _sendBotMessage('Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ ƒë·ªçc h·ª£p l·ªá (1-6).');
      }
    }
  }
  
  void _setSubTopic(String subTopic) {
    setState(() {
      _currentSubTopic = subTopic;
    });
    
    _callChatGPTWithTopic();
  }
  
  void _processUserInput(String text) {
    // Ch·ªâ reset waiting state cho c√°c ch·ªß ƒë·ªÅ kh√¥ng ph·∫£i t∆∞ v·∫•n/h·ªó tr·ª£
    if (_currentTopic != 'course-advice' && _currentTopic != 'center-support') {
      setState(() {
        _waitingForUserInput = false;
      });
    }
    
    if (_currentTopic == 'translation') {
      _getTranslation(text);
    } else if (_currentTopic == 'course-advice') {
      _getCourseAdvice(text);
    } else if (_currentTopic == 'center-support') {
      _getCenterSupport(text);
    } else {
      _callChatGPTAPI(text);
    }
  }
  
  void _getTranslation(String text) {
    _callChatGPTAPI("D·ªãch t·ª´ sau sang ti·∫øng Vi·ªát, cho bi·∫øt lo·∫°i t·ª´ (N, V, ADJ...) v√† 2 v√≠ d·ª• s·ª≠ d·ª•ng kh√°c nhau: \"$text\"");
  }
  
  void _getCourseAdvice(String text) {
    String prompt = '''B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n kh√≥a h·ªçc c·ªßa Tr∆∞·ªùng Anh ng·ªØ qu·ªëc t·∫ø PoPoDoo ƒê·ªãnh C√¥ng. 
    D·ª±a tr√™n th√¥ng tin sau:
    - ƒê·ªãa ch·ªâ: S·ªë 85, ƒê∆∞·ªùng Tr·∫ßn Nguy√™n ƒê√°n, Ph∆∞·ªùng ƒê·ªãnh C√¥ng, Qu·∫≠n Ho√†ng Mai, H√† N·ªôi
    - H·ªçc ph√≠: T·ª´ 1.650.000 VNƒê/th√°ng
    - ƒê·ªô tu·ªïi: 3-15 tu·ªïi
    
    Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:
    1. Ti·∫øng Anh m·∫ßm non (3-5 tu·ªïi)
    2. Ti·∫øng Anh ti·ªÉu h·ªçc (6-10 tu·ªïi)
    3. Ti·∫øng Anh thi·∫øu ni√™n (11-15 tu·ªïi)
    
    ƒêi·ªÉm n·ªïi b·∫≠t:
    - H∆°n 10 nƒÉm kinh nghi·ªám
    - Ch∆∞∆°ng tr√¨nh Cambridge
    - M√¥i tr∆∞·ªùng h·ªçc t·∫≠p ƒëa ph∆∞∆°ng ti·ªán
    - Gi√°o vi√™n Vi·ªát Nam v√† n∆∞·ªõc ngo√†i
    - C∆° s·ªü v·∫≠t ch·∫•t hi·ªán ƒë·∫°i
    
    H√£y t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p d·ª±a tr√™n y√™u c·∫ßu c·ªßa h·ªçc vi√™n: "$text"
    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·∫≠p trung v√†o kh√≥a h·ªçc ph√π h·ª£p nh·∫•t v√† l√Ω do ch·ªçn kh√≥a h·ªçc ƒë√≥.''';
    
    _callChatGPTAPI(prompt);
  }

  void _getCenterSupport(String text) {
    String prompt = '''B·∫°n l√† nh√¢n vi√™n h·ªó tr·ª£ c·ªßa Tr∆∞·ªùng Anh ng·ªØ qu·ªëc t·∫ø PoPoDoo ƒê·ªãnh C√¥ng.
    D·ª±a tr√™n th√¥ng tin sau:
    - ƒê·ªãa ch·ªâ: S·ªë 85, ƒê∆∞·ªùng Tr·∫ßn Nguy√™n ƒê√°n, Ph∆∞·ªùng ƒê·ªãnh C√¥ng, Qu·∫≠n Ho√†ng Mai, H√† N·ªôi
    - H·ªçc ph√≠: T·ª´ 1.650.000 VNƒê/th√°ng
    - ƒê·ªô tu·ªïi: 3-15 tu·ªïi
    - Ch∆∞∆°ng tr√¨nh: Theo ti√™u chu·∫©n Cambridge
    - ƒêi·ªÉm n·ªïi b·∫≠t: H∆°n 10 nƒÉm kinh nghi·ªám, gi√°o vi√™n ƒë·∫°t chu·∫©n, c∆° s·ªü v·∫≠t ch·∫•t hi·ªán ƒë·∫°i
    
    H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªçc vi√™n: "$text"
    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c v√† h·ªØu √≠ch.''';
    
    _callChatGPTAPI(prompt);
  }
  
  void _callChatGPTWithTopic() {
    String prompt = '';
    
    if (_currentTopic == 'vocabulary') {
      String topicName = _getTopicDisplayName(_currentSubTopic);
      prompt = "Cho t√¥i 15 t·ª´ v·ª±ng ti·∫øng Anh th√¥ng d·ª•ng v·ªÅ ch·ªß ƒë·ªÅ $topicName. Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng danh s√°ch v·ªõi ƒë·ªãnh d·∫°ng: t·ª´ ti·∫øng Anh (lo·∫°i t·ª´) - nghƒ©a ti·∫øng Vi·ªát. Ch·ªâ li·ªát k√™ c√°c t·ª´, kh√¥ng c·∫ßn gi·∫£i th√≠ch th√™m.";
    } else if (_currentTopic == 'grammar') {
      String topicName = _getTopicDisplayName(_currentSubTopic);
      prompt = "Gi·∫£i th√≠ch ng·ªØ ph√°p ti·∫øng Anh v·ªÅ $topicName. Bao g·ªìm: ƒë·ªãnh nghƒ©a, c√°ch s·ª≠ d·ª•ng, c√°c quy t·∫Øc quan tr·ªçng v√† 3-5 v√≠ d·ª• c·ª• th·ªÉ v·ªõi nghƒ©a ti·∫øng Vi·ªát. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.";
    } else if (_currentTopic == 'reading') {
      String topicName = _getTopicDisplayName(_currentSubTopic);
      prompt = "Vi·∫øt m·ªôt ƒëo·∫°n vƒÉn ti·∫øng Anh kho·∫£ng 100-150 t·ª´ v·ªÅ ch·ªß ƒë·ªÅ $topicName. Sau ƒë√≥ d·ªãch sang ti·∫øng Vi·ªát. ƒê·ªãnh d·∫°ng: ƒëo·∫°n vƒÉn ti·∫øng Anh tr∆∞·ªõc, sau ƒë√≥ l√† d·ªãch nghƒ©a ti·∫øng Vi·ªát.";
    }
    
    _callChatGPTAPI(prompt);
  }
  
  String _getTopicDisplayName(String topic) {
    switch (topic) {
      case 'family': return 'gia ƒë√¨nh';
      case 'health': return 's·ª©c kh·ªèe';
      case 'love': return 't√¨nh y√™u';
      case 'work': return 'c√¥ng vi·ªác';
      case 'travel': return 'du l·ªãch';
      case 'food': return '·∫©m th·ª±c';
      case 'tenses': return 'th√¨ (tenses)';
      case 'articles': return 'm·∫°o t·ª´ (articles)';
      case 'prepositions': return 'gi·ªõi t·ª´ (prepositions)';
      case 'relative-clauses': return 'm·ªánh ƒë·ªÅ quan h·ªá (relative clauses)';
      case 'conditionals': return 'c√¢u ƒëi·ªÅu ki·ªán (conditionals)';
      case 'culture': return 'vƒÉn h√≥a';
      case 'technology': return 'c√¥ng ngh·ªá';
      case 'sports': return 'th·ªÉ thao';
      case 'education': return 'gi√°o d·ª•c';
      case 'environment': return 'm√¥i tr∆∞·ªùng';
      case 'science': return 'khoa h·ªçc';
      default: return topic;
    }
  }
  
  void _resetTopics() {
    setState(() {
      _currentTopic = '';
      _currentSubTopic = '';
      _waitingForUserInput = false;
    });
  }

  Future<void> _callChatGPTAPI(String text) async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      // T·∫°o prompt v·ªõi h∆∞·ªõng d·∫´n ng√¥n ng·ªØ
      String finalPrompt = "B·∫°n l√† tr·ª£ l√Ω h·ªçc ti·∫øng Anh. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. Ch·ªâ h·ªó tr·ª£ c√°c ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn vi·ªác h·ªçc ti·∫øng Anh, t·ª´ ch·ªëi c√°c c√¢u h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c. Lu√¥n tr·∫£ l·ªùi ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu v√† ƒë√∫ng tr·ªçng t√¢m. D∆∞·ªõi ƒë√¢y l√† y√™u c·∫ßu c·ªßa t√¥i:\n\n$text";
      
      // G·ªçi API Cohere th√¥ng qua ChatGPT Service
      String response = await _chatGPTService.fixText(finalPrompt);
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£
      _sendBotMessage(response);
      
      // Set waiting state based on current topic
      setState(() {
        _waitingForUserInput = _currentTopic == 'course-advice' || _currentTopic == 'center-support';
      });
    } catch (e) {
      print("Error calling ChatGPT API: $e");
      _sendBotMessage("Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }
  
  void _sendBotMessage(String message) {
    setState(() {
      _messages.add(ChatMessage(text: message, isUser: false));
    });
    _scrollToBottom();
  }
  
  void _handleSubmitted(String text) {
    if (text.trim().isEmpty) return;

    _textController.clear();

    setState(() {
      _messages.add(ChatMessage(text: text, isUser: true));
    });

    _scrollToBottom();
    _processUserChoice(text);
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AI Language Tutor'),
        actions: [
          PopupMenuButton<String>(
            onSelected: (value) {
              if (value == 'clear') {
                setState(() {
                  _messages.clear();
                  _resetTopics();
                  _addInitialMessage();
                });
              } else if (value == 'menu') {
                _resetTopics();
                _sendBotMessage('H√¥m nay b·∫°n mu·ªën tr√≤ chuy·ªán v·ªÅ v·∫•n ƒë·ªÅ g√¨:\n\n1. T·ª´ v·ª±ng\n2. Ng·ªØ ph√°p\n3. D·ªãch thu·∫≠t\n4. ƒê·ªçc m·ªôt c√¢u chuy·ªán/b√†i b√°o ti·∫øng Anh\n5. T∆∞ v·∫•n kh√≥a h·ªçc\n6. H·ªó tr·ª£ trung t√¢m');
              }
            },
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'clear',
                child: Text('X√≥a cu·ªôc tr√≤ chuy·ªán'),
              ),
              const PopupMenuItem(
                value: 'menu',
                child: Text('Quay l·∫°i menu ch√≠nh'),
              ),
            ],
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.all(16.0),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                final message = _messages[index];
                return _buildMessage(message);
              },
            ),
          ),
          if (_isLoading)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: LinearProgressIndicator(),
            ),
          _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildMessage(ChatMessage message) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment:
            message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!message.isUser)
            CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor,
              child: const Icon(Icons.smart_toy, color: Colors.white),
            ),
          if (!message.isUser) const SizedBox(width: 12),
          Flexible(
            child: Container(
              padding: const EdgeInsets.symmetric(
                horizontal: 16.0,
                vertical: 12.0,
              ),
              decoration: BoxDecoration(
                color: message.isUser
                    ? Theme.of(context).primaryColor
                    : Colors.grey.shade200,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Text(
                message.text,
                style: TextStyle(
                  color: message.isUser ? Colors.white : Colors.black,
                ),
              ),
            ),
          ),
          if (message.isUser) const SizedBox(width: 12),
          if (message.isUser)
            CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor,
              child: const Icon(Icons.person, color: Colors.white),
            ),
        ],
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, -1),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _textController,
              decoration: const InputDecoration(
                hintText: 'Nh·∫≠p c√¢u h·ªèi ho·∫∑c l·ª±a ch·ªçn...',
                border: InputBorder.none,
              ),
              textCapitalization: TextCapitalization.sentences,
              onSubmitted: _isLoading ? null : _handleSubmitted,
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send),
            onPressed: _isLoading
                ? null
                : () => _handleSubmitted(_textController.text),
          ),
        ],
      ),
    );
  }
}